{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","components_Message","key","id","senderId","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","console","log","_this3","getJoinableRooms","_this4","hooks","onNewMessage","concat","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6c3a055.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Message(props) {  \n    return (\n        <div className=\"message\">\n            <div className=\"message-username\">{props.username}</div>\n            <div className=\"message-text\">{props.text}</div>\n        </div>\n    )\n}\n\nexport default Message","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Message from './Message'\n\nclass MessageList extends React.Component {\n    \n    componentWillUpdate() {\n        const node = ReactDOM.findDOMNode(this)\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\n    }\n    \n    componentDidUpdate() {\n        if (this.shouldScrollToBottom) {\n            const node = ReactDOM.findDOMNode(this)\n            node.scrollTop = node.scrollHeight   \n        }\n    }\n    \n    render() {\n        if (!this.props.roomId) {\n            return (\n                <div className=\"message-list\">\n                    <div className=\"join-room\">\n                        Join a room! &rarr; \n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"message-list\">\n                {this.props.messages.map((message, index) => {\n                    return (\n                        <Message key={message.id} username={message.senderId} text={message.text} />\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default MessageList","import React from 'react'\n\nclass SendMessageForm extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            message: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(e) {\n        this.setState({\n            message: e.target.value\n        })\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault()\n        this.props.sendMessage(this.state.message)\n        this.setState({\n            message: ''\n        })\n    }\n    \n    render() {\n        return (\n            <form\n                onSubmit={this.handleSubmit}\n                className=\"send-message-form\">\n                <input\n                    disabled={this.props.disabled}\n                    onChange={this.handleChange}\n                    value={this.state.message}\n                    placeholder=\"Type your message and hit ENTER\"\n                    type=\"text\" />\n            </form>\n        )\n    }\n}\n\nexport default SendMessageForm","import React from 'react'\n\nclass RoomList extends React.Component {\n    render () {\n        const orderedRooms = [...this.props.rooms].sort((a, b) => a.id > b.id)\n        return (\n            <div className=\"rooms-list\">\n                <ul>\n                <h3>Your rooms:</h3>\n                    {orderedRooms.map(room => {\n                        const active = room.id === this.props.roomId ? 'active' : '';\n                        return (\n                            <li key={room.id} className={\"room \" + active}>\n                                <a\n                                    onClick={() => this.props.subscribeToRoom(room.id)}\n                                    href=\"#NFL\"> # {room.name}\n                                </a>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default RoomList","import React from 'react'\n\nclass NewRoomForm extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            roomName: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    handleChange(e) {\n        this.setState({\n            roomName: e.target.value\n        })\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault()\n        this.props.createRoom(this.state.roomName)\n        this.setState({roomName: ''})\n    }\n    \n    render () {\n        return (\n            <div className=\"new-room-form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        value={this.state.roomName}\n                        onChange={this.handleChange}\n                        type=\"text\" \n                        placeholder=\"Create a room\" \n                        required />\n                    <button id=\"create-room-btn\" type=\"submit\">+\n                    </button>\n            </form>\n        </div>\n        )\n    }\n}\n\nexport default NewRoomForm","import React from 'react'\nimport Chatkit from '@pusher/chatkit'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\n\nimport { tokenUrl, instanceLocator } from './config'\n\nclass App extends React.Component {\n    \n    constructor() {\n        super()\n        this.state = {\n            roomId: null,\n            messages: [],\n            joinableRooms: [],\n            joinedRooms: []\n        }\n        this.sendMessage = this.sendMessage.bind(this)\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\n        this.getRooms = this.getRooms.bind(this)\n        this.createRoom = this.createRoom.bind(this)\n    } \n    \n    componentDidMount() {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator,\n            userId: 'User1',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: tokenUrl\n            })\n        })\n        \n        chatManager.connect()\n        .then(currentUser => {\n            this.currentUser = currentUser\n            this.getRooms()\n        })\n        .catch(err => console.log('error on connecting: ', err))\n    }\n    \n    getRooms() {\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n            this.setState({\n                joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            })\n        })\n        .catch(err => console.log('error on joinableRooms: ', err))\n    }\n    \n    subscribeToRoom(roomId) {\n        this.setState({ messages: [] })\n        this.currentUser.subscribeToRoom({\n            roomId: roomId,\n            hooks: {\n                onNewMessage: message => {\n                    this.setState({\n                        messages: [...this.state.messages, message]\n                    })\n                }\n                \n            }\n        })\n        .then(room => {\n            this.setState({\n                roomId: room.id\n            })\n            this.getRooms()\n        })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n    \n    sendMessage(text) {\n        this.currentUser.sendMessage({\n            text,\n            roomId: this.state.roomId\n        })\n    }\n    \n    createRoom(name){\n      this.currentUser.createRoom ({\n            name\n        })\n        .then(room => {\n            this.subscribeToRoom(room.id)\n        })\n        .catch(err => console.log('error with createRoom: ', err))\n    }\n    \n    render() {\n        return (\n            <div className=\"app\">\n                <RoomList\n                    subscribeToRoom={this.subscribeToRoom}\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n                    roomId={this.state.roomId} />\n                <MessageList \n                    roomId={this.state.roomId}\n                    messages={this.state.messages} />\n                <SendMessageForm\n                    disabled={!this.state.roomId}\n                    sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom} />\n            </div>\n        );\n    }\n}\n\nexport default App","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/5909b13f-cb14-44b3-9e4e-82ef547fbe97/token\";\nconst instanceLocator = \"v1:us1:5909b13f-cb14-44b3-9e4e-82ef547fbe97\";\n\nexport { tokenUrl, instanceLocator }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}